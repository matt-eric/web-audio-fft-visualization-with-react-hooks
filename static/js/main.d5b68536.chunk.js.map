{"version":3,"sources":["audio/GummyBearz.mp3","components/VisualDemo.js","components/AudioDataContainer.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","flexContainer","display","flexWrap","justifyContent","paddingTop","VisualDemo","props","classes","amplitudeValues","useRef","adjustFreqBandStyle","newAmplitudeData","current","domElements","frequencyBandArray","map","num","document","getElementById","i","length","style","backgroundColor","height","runSpectrum","getFrequencyData","requestAnimationFrame","Tooltip","title","aria-label","placement","IconButton","id","onClick","initializeAudioAnalyser","disabled","audioData","className","Paper","elevation","key","AudioDataContainer","audioFile","Audio","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","src","soundFile","fftSize","connect","destination","play","setState","styleAdjuster","bufferLength","state","frequencyBinCount","amplitudeArray","Uint8Array","getByteFrequencyData","Array","keys","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,wC,kQCQrCC,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,cAAe,CACbC,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,WAAY,YAID,SAASC,EAAWC,GAE/B,IAAMC,EAAUV,IAEVW,EAAkBC,iBAAO,MAE/B,SAASC,EAAoBC,GAC3BH,EAAgBI,QAAUD,EAG1B,IAFA,IAAIE,EAAcP,EAAMQ,mBAAmBC,KAAI,SAACC,GAAD,OAC7CC,SAASC,eAAeF,MAClBG,EAAE,EAAGA,EAAEb,EAAMQ,mBAAmBM,OAAQD,IAAI,CAClD,IAAIH,EAAMV,EAAMQ,mBAAmBK,GACnCN,EAAYG,GAAKK,MAAMC,gBAAvB,sBAAwDd,EAAgBI,QAAQI,GAAhF,KACAH,EAAYG,GAAKK,MAAME,OAAvB,UAAmCf,EAAgBI,QAAQI,GAA3D,OAIJ,SAASQ,IACPlB,EAAMmB,iBAAiBf,GACvBgB,sBAAsBF,GAQxB,OAEE,6BAEE,6BACE,kBAACG,EAAA,EAAD,CACEC,MAAM,QACNC,aAAW,QACXC,UAAU,SACV,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHC,QAAS,kBAfjB3B,EAAM4B,+BACNR,sBAAsBF,IAedW,WAAY7B,EAAM8B,WAClB,kBAAC,IAAD,SAKN,yBAAKC,UAAW9B,EAAQP,eACrBM,EAAMQ,mBAAmBC,KAAI,SAACC,GAAD,OAC5B,kBAACsB,EAAA,EAAD,CACED,UAAW,iBACXE,UAAW,EACXP,GAAIhB,EACJwB,IAAKxB,S,qBCnBJyB,E,YA3Cb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAKR4B,wBAA0B,WACxB,IAAMQ,EAAY,IAAIC,MAChBC,EAAe,IAAIC,aACnBC,EAASF,EAAaG,yBAAyBL,GAC/CM,EAAWJ,EAAaK,iBAC9BP,EAAUQ,IAAMC,IAChBH,EAASI,QAAU,GACnBN,EAAOO,QAAQT,EAAaU,aAC5BR,EAAOO,QAAQL,GACfN,EAAUa,OACR,EAAKC,SAAS,CACZpB,UAAWY,KAjBE,EAqBnBvB,iBAAmB,SAACgC,GAClB,IAAMC,EAAe,EAAKC,MAAMvB,UAAUwB,kBACpCC,EAAiB,IAAIC,WAAWJ,GACtC,EAAKC,MAAMvB,UAAU2B,qBAAqBF,GAC1CJ,EAAcI,IAvBd,EAAKF,MAAQ,GACb,EAAK7C,mBAAL,YAA8BkD,MAAM,IAAIC,QAHvB,E,sEA8BjB,OACE,6BACE,kBAAC5D,EAAD,CACE6B,wBAAyBgC,KAAKhC,wBAC9BpB,mBAAoBoD,KAAKpD,mBACzBW,iBAAkByC,KAAKzC,iBACvBW,UAAW8B,KAAKP,MAAMvB,iB,GAtCC+B,IAAMC,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAwB1D,SAASC,eAAe,SD2H1D,kBAAmB0D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5b68536.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GummyBearz.977769bf.mp3\";","import React, { useRef }  from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../stylesheets/App.scss';\n\nconst useStyles = makeStyles(theme => ({\n  flexContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    paddingTop: '25%'\n  }\n}));\n\nexport default function VisualDemo(props) {\n\n    const classes = useStyles();\n\n    const amplitudeValues = useRef(null);\n\n    function adjustFreqBandStyle(newAmplitudeData){\n      amplitudeValues.current = newAmplitudeData;\n      let domElements = props.frequencyBandArray.map((num) =>\n        document.getElementById(num))\n      for(let i=0; i<props.frequencyBandArray.length; i++){\n        let num = props.frequencyBandArray[i]\n        domElements[num].style.backgroundColor = `rgb(0, 255, ${amplitudeValues.current[num]})`\n        domElements[num].style.height = `${amplitudeValues.current[num]}px`\n      }\n    };\n\n    function runSpectrum(){\n      props.getFrequencyData(adjustFreqBandStyle)\n      requestAnimationFrame(runSpectrum)\n    }\n\n    function handleStartBottonClick(){\n      props.initializeAudioAnalyser()\n      requestAnimationFrame(runSpectrum)\n    }\n\n    return (\n\n      <div>\n\n        <div>\n          <Tooltip\n            title=\"Start\"\n            aria-label=\"Start\"\n            placement=\"right\">\n            <IconButton\n              id='startButton'\n              onClick={() => handleStartBottonClick()}\n              disabled={!!props.audioData ? true : false}>\n              <EqualizerIcon/>\n            </IconButton>\n          </Tooltip>\n        </div>\n\n        <div className={classes.flexContainer}>\n          {props.frequencyBandArray.map((num) =>\n            <Paper\n              className={'frequencyBands'}\n              elevation={4}\n              id={num}\n              key={num}\n            />\n          )}\n        </div>\n\n      </div>\n\n    );\n\n}\n","import React from 'react';\nimport VisualDemo from './VisualDemo';\nimport soundFile from '../audio/GummyBearz.mp3'\n\nclass AudioDataContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.frequencyBandArray = [...Array(25).keys()]\n  }\n\n  initializeAudioAnalyser = () => {\n    const audioFile = new Audio();\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaElementSource(audioFile);\n    const analyser = audioContext.createAnalyser();\n    audioFile.src = soundFile;\n    analyser.fftSize = 64\n    source.connect(audioContext.destination);\n    source.connect(analyser);\n    audioFile.play()\n      this.setState({\n        audioData: analyser\n      })\n  }\n\n  getFrequencyData = (styleAdjuster) => {\n    const bufferLength = this.state.audioData.frequencyBinCount;\n    const amplitudeArray = new Uint8Array(bufferLength);\n    this.state.audioData.getByteFrequencyData(amplitudeArray)\n    styleAdjuster(amplitudeArray)\n  }\n\n  render(){\n\n    return (\n      <div>\n        <VisualDemo\n          initializeAudioAnalyser={this.initializeAudioAnalyser}\n          frequencyBandArray={this.frequencyBandArray}\n          getFrequencyData={this.getFrequencyData}\n          audioData={this.state.audioData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AudioDataContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport AudioDataContainer from './components/AudioDataContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AudioDataContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}